import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/react-geocode/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-geocode/dist/index.js"(exports) {
    var RequestType;
    var OutputFormat;
    var __awaiter = exports && exports.__awaiter || function(e, u, a, p) {
      return new (a = a || Promise)(function(o, t) {
        function s(e2) {
          try {
            n(p.next(e2));
          } catch (e3) {
            t(e3);
          }
        }
        function r(e2) {
          try {
            n(p.throw(e2));
          } catch (e3) {
            t(e3);
          }
        }
        function n(e2) {
          var t2;
          e2.done ? o(e2.value) : ((t2 = e2.value) instanceof a ? t2 : new a(function(e3) {
            e3(t2);
          })).then(s, r);
        }
        n((p = p.apply(e, u || [])).next());
      });
    };
    var __rest = exports && exports.__rest || function(e, t) {
      var o = {};
      for (r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);
      if (null != e && "function" == typeof Object.getOwnPropertySymbols) for (var s = 0, r = Object.getOwnPropertySymbols(e); s < r.length; s++) t.indexOf(r[s]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[s]) && (o[r[s]] = e[r[s]]);
      return o;
    };
    Object.defineProperty(exports, "__esModule", { value: true }), exports.fromLatLng = exports.fromPlaceId = exports.fromAddress = exports.geocode = exports.enableAddressDescriptor = exports.setOutputFormat = exports.setLocationType = exports.setResultType = exports.setBounds = exports.setComponents = exports.setRegion = exports.setLanguage = exports.setKey = exports.setDefaults = exports.OutputFormat = exports.RequestType = void 0, function(e) {
      e.ADDRESS = "address", e.LATLNG = "latlng", e.PLACE_ID = "place_id";
    }(RequestType = exports.RequestType || (exports.RequestType = {})), function(e) {
      e.XML = "xml", e.JSON = "json";
    }(OutputFormat = exports.OutputFormat || (exports.OutputFormat = {}));
    var GOOGLE_GEOCODE_API = "https://maps.googleapis.com/maps/api/geocode";
    var defaultOptions = { outputFormat: OutputFormat.JSON };
    function geocodeRequest(n) {
      return __awaiter(this, void 0, void 0, function* () {
        var e = n["outputFormat"], t = __rest(n, ["outputFormat"]), t = new URLSearchParams(t).toString(), e = GOOGLE_GEOCODE_API + `/${e}?` + t;
        try {
          var o = yield (yield fetch(e)).json(), { status: s, error_message: r } = o;
          if ("OK" === s) return o;
          throw new Error(`Geocoding failed: ${r}. Server returned status code ${s}.`);
        } catch (e2) {
          if (e2 instanceof Error) throw new Error("Geocoding request failed: " + e2.message);
          throw new Error("Geocoding request failed with unknown error: " + e2);
        }
      });
    }
    function setDefaults(e) {
      defaultOptions = Object.assign(Object.assign({}, defaultOptions), e);
    }
    function setKey(e) {
      defaultOptions.key = e;
    }
    function setLanguage(e) {
      defaultOptions.language = e;
    }
    function setRegion(e) {
      defaultOptions.region = e;
    }
    function setComponents(e) {
      defaultOptions.components = e;
    }
    function setBounds(e) {
      defaultOptions.bounds = e;
    }
    function setResultType(e) {
      defaultOptions.result_type = e;
    }
    function setLocationType(e) {
      defaultOptions.location_type = e;
    }
    function setOutputFormat(e) {
      defaultOptions.outputFormat = e;
    }
    function enableAddressDescriptor(e) {
      defaultOptions.enable_address_descriptor = e;
    }
    function geocode(e, t, o) {
      if ("string" != typeof e || "string" != typeof t) throw new Error(`Both requestType and value are required and must be of type string. 
       requestType: ${typeof e}, value: ` + typeof t);
      return geocodeRequest(Object.assign(Object.assign(Object.assign({}, defaultOptions), o), { [e]: t }));
    }
    function fromAddress(e, t, o, s) {
      var r = { outputFormat: OutputFormat.JSON };
      return t && (r.key = t), o && (r.language = o), s && (r.region = s), geocode(RequestType.ADDRESS, e, r);
    }
    function fromPlaceId(e, t, o, s) {
      var r = { outputFormat: OutputFormat.JSON };
      return t && (r.key = t), o && (r.language = o), s && (r.region = s), geocode(RequestType.PLACE_ID, e, r);
    }
    function fromLatLng(e, t, o, s, r, n) {
      var u = { outputFormat: OutputFormat.JSON };
      return o && (u.key = o), s && (u.language = s), r && (u.region = r), n && (u.location_type = n), geocode(RequestType.LATLNG, e + "," + t, u);
    }
    exports.setDefaults = setDefaults, exports.setKey = setKey, exports.setLanguage = setLanguage, exports.setRegion = setRegion, exports.setComponents = setComponents, exports.setBounds = setBounds, exports.setResultType = setResultType, exports.setLocationType = setLocationType, exports.setOutputFormat = setOutputFormat, exports.enableAddressDescriptor = enableAddressDescriptor, exports.geocode = geocode, exports.fromAddress = fromAddress, exports.fromPlaceId = fromPlaceId, exports.fromLatLng = fromLatLng;
  }
});
export default require_dist();
//# sourceMappingURL=react-geocode.js.map
