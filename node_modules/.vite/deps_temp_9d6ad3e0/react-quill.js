import {
  require_quill
} from "./chunk-533GRIZT.js";
import {
  require_baseIsEqual
} from "./chunk-TVNZ3K43.js";
import {
  require_react_dom
} from "./chunk-3IHV7RO6.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual;
  }
});

// node_modules/react-quill/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-quill/lib/index.js"(exports, module) {
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var react_1 = __importDefault(require_react());
    var react_dom_1 = __importDefault(require_react_dom());
    var isEqual_1 = __importDefault(require_isEqual());
    var quill_1 = __importDefault(require_quill());
    var ReactQuill = (
      /** @class */
      function(_super) {
        __extends(ReactQuill2, _super);
        function ReactQuill2(props) {
          var _this = _super.call(this, props) || this;
          _this.dirtyProps = [
            "modules",
            "formats",
            "bounds",
            "theme",
            "children"
          ];
          _this.cleanProps = [
            "id",
            "className",
            "style",
            "placeholder",
            "tabIndex",
            "onChange",
            "onChangeSelection",
            "onFocus",
            "onBlur",
            "onKeyPress",
            "onKeyDown",
            "onKeyUp"
          ];
          _this.state = {
            generation: 0
          };
          _this.selection = null;
          _this.onEditorChange = function(eventName, rangeOrDelta, oldRangeOrDelta, source) {
            var _a, _b, _c, _d;
            if (eventName === "text-change") {
              (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);
            } else if (eventName === "selection-change") {
              (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);
            }
          };
          var value = _this.isControlled() ? props.value : props.defaultValue;
          _this.value = value !== null && value !== void 0 ? value : "";
          return _this;
        }
        ReactQuill2.prototype.validateProps = function(props) {
          var _a;
          if (react_1.default.Children.count(props.children) > 1)
            throw new Error("The Quill editing area can only be composed of a single React element.");
          if (react_1.default.Children.count(props.children)) {
            var child = react_1.default.Children.only(props.children);
            if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === "textarea")
              throw new Error("Quill does not support editing on a <textarea>. Use a <div> instead.");
          }
          if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet)
            throw new Error("You are passing the `delta` object from the `onChange` event back as `value`. You most probably want `editor.getContents()` instead. See: https://github.com/zenoamaro/react-quill#using-deltas");
        };
        ReactQuill2.prototype.shouldComponentUpdate = function(nextProps, nextState) {
          var _this = this;
          var _a;
          this.validateProps(nextProps);
          if (!this.editor || this.state.generation !== nextState.generation) {
            return true;
          }
          if ("value" in nextProps) {
            var prevContents = this.getEditorContents();
            var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : "");
            if (!this.isEqualValue(nextContents, prevContents)) {
              this.setEditorContents(this.editor, nextContents);
            }
          }
          if (nextProps.readOnly !== this.props.readOnly) {
            this.setEditorReadOnly(this.editor, nextProps.readOnly);
          }
          return __spreadArrays(this.cleanProps, this.dirtyProps).some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill2.prototype.shouldComponentRegenerate = function(nextProps) {
          var _this = this;
          return this.dirtyProps.some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill2.prototype.componentDidMount = function() {
          this.instantiateEditor();
          this.setEditorContents(this.editor, this.getEditorContents());
        };
        ReactQuill2.prototype.componentWillUnmount = function() {
          this.destroyEditor();
        };
        ReactQuill2.prototype.componentDidUpdate = function(prevProps, prevState) {
          var _this = this;
          if (this.editor && this.shouldComponentRegenerate(prevProps)) {
            var delta = this.editor.getContents();
            var selection = this.editor.getSelection();
            this.regenerationSnapshot = { delta, selection };
            this.setState({ generation: this.state.generation + 1 });
            this.destroyEditor();
          }
          if (this.state.generation !== prevState.generation) {
            var _a = this.regenerationSnapshot, delta = _a.delta, selection_1 = _a.selection;
            delete this.regenerationSnapshot;
            this.instantiateEditor();
            var editor_1 = this.editor;
            editor_1.setContents(delta);
            postpone(function() {
              return _this.setEditorSelection(editor_1, selection_1);
            });
          }
        };
        ReactQuill2.prototype.instantiateEditor = function() {
          if (this.editor) {
            this.hookEditor(this.editor);
          } else {
            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
          }
        };
        ReactQuill2.prototype.destroyEditor = function() {
          if (!this.editor)
            return;
          this.unhookEditor(this.editor);
        };
        ReactQuill2.prototype.isControlled = function() {
          return "value" in this.props;
        };
        ReactQuill2.prototype.getEditorConfig = function() {
          return {
            bounds: this.props.bounds,
            formats: this.props.formats,
            modules: this.props.modules,
            placeholder: this.props.placeholder,
            readOnly: this.props.readOnly,
            scrollingContainer: this.props.scrollingContainer,
            tabIndex: this.props.tabIndex,
            theme: this.props.theme
          };
        };
        ReactQuill2.prototype.getEditor = function() {
          if (!this.editor)
            throw new Error("Accessing non-instantiated editor");
          return this.editor;
        };
        ReactQuill2.prototype.createEditor = function(element, config) {
          var editor = new quill_1.default(element, config);
          if (config.tabIndex != null) {
            this.setEditorTabIndex(editor, config.tabIndex);
          }
          this.hookEditor(editor);
          return editor;
        };
        ReactQuill2.prototype.hookEditor = function(editor) {
          this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);
          editor.on("editor-change", this.onEditorChange);
        };
        ReactQuill2.prototype.unhookEditor = function(editor) {
          editor.off("editor-change", this.onEditorChange);
        };
        ReactQuill2.prototype.getEditorContents = function() {
          return this.value;
        };
        ReactQuill2.prototype.getEditorSelection = function() {
          return this.selection;
        };
        ReactQuill2.prototype.isDelta = function(value) {
          return value && value.ops;
        };
        ReactQuill2.prototype.isEqualValue = function(value, nextValue) {
          if (this.isDelta(value) && this.isDelta(nextValue)) {
            return isEqual_1.default(value.ops, nextValue.ops);
          } else {
            return isEqual_1.default(value, nextValue);
          }
        };
        ReactQuill2.prototype.setEditorContents = function(editor, value) {
          var _this = this;
          this.value = value;
          var sel = this.getEditorSelection();
          if (typeof value === "string") {
            editor.setContents(editor.clipboard.convert(value));
          } else {
            editor.setContents(value);
          }
          postpone(function() {
            return _this.setEditorSelection(editor, sel);
          });
        };
        ReactQuill2.prototype.setEditorSelection = function(editor, range) {
          this.selection = range;
          if (range) {
            var length_1 = editor.getLength();
            range.index = Math.max(0, Math.min(range.index, length_1 - 1));
            range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));
            editor.setSelection(range);
          }
        };
        ReactQuill2.prototype.setEditorTabIndex = function(editor, tabIndex) {
          var _a, _b;
          if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {
            editor.scroll.domNode.tabIndex = tabIndex;
          }
        };
        ReactQuill2.prototype.setEditorReadOnly = function(editor, value) {
          if (value) {
            editor.disable();
          } else {
            editor.enable();
          }
        };
        ReactQuill2.prototype.makeUnprivilegedEditor = function(editor) {
          var e = editor;
          return {
            getHTML: function() {
              return e.root.innerHTML;
            },
            getLength: e.getLength.bind(e),
            getText: e.getText.bind(e),
            getContents: e.getContents.bind(e),
            getSelection: e.getSelection.bind(e),
            getBounds: e.getBounds.bind(e)
          };
        };
        ReactQuill2.prototype.getEditingArea = function() {
          if (!this.editingArea) {
            throw new Error("Instantiating on missing editing area");
          }
          var element = react_dom_1.default.findDOMNode(this.editingArea);
          if (!element) {
            throw new Error("Cannot find element for editing area");
          }
          if (element.nodeType === 3) {
            throw new Error("Editing area cannot be a text node");
          }
          return element;
        };
        ReactQuill2.prototype.renderEditingArea = function() {
          var _this = this;
          var _a = this.props, children = _a.children, preserveWhitespace = _a.preserveWhitespace;
          var generation = this.state.generation;
          var properties = {
            key: generation,
            ref: function(instance) {
              _this.editingArea = instance;
            }
          };
          if (react_1.default.Children.count(children)) {
            return react_1.default.cloneElement(react_1.default.Children.only(children), properties);
          }
          return preserveWhitespace ? react_1.default.createElement("pre", __assign({}, properties)) : react_1.default.createElement("div", __assign({}, properties));
        };
        ReactQuill2.prototype.render = function() {
          var _a;
          return react_1.default.createElement("div", { id: this.props.id, style: this.props.style, key: this.state.generation, className: "quill " + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : ""), onKeyPress: this.props.onKeyPress, onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp }, this.renderEditingArea());
        };
        ReactQuill2.prototype.onEditorChangeText = function(value, delta, source, editor) {
          var _a, _b;
          if (!this.editor)
            return;
          var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();
          if (nextContents !== this.getEditorContents()) {
            this.lastDeltaChangeSet = delta;
            this.value = nextContents;
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);
          }
        };
        ReactQuill2.prototype.onEditorChangeSelection = function(nextSelection, source, editor) {
          var _a, _b, _c, _d, _e, _f;
          if (!this.editor)
            return;
          var currentSelection = this.getEditorSelection();
          var hasGainedFocus = !currentSelection && nextSelection;
          var hasLostFocus = currentSelection && !nextSelection;
          if (isEqual_1.default(nextSelection, currentSelection))
            return;
          this.selection = nextSelection;
          (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);
          if (hasGainedFocus) {
            (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);
          } else if (hasLostFocus) {
            (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);
          }
        };
        ReactQuill2.prototype.focus = function() {
          if (!this.editor)
            return;
          this.editor.focus();
        };
        ReactQuill2.prototype.blur = function() {
          if (!this.editor)
            return;
          this.selection = null;
          this.editor.blur();
        };
        ReactQuill2.displayName = "React Quill";
        ReactQuill2.Quill = quill_1.default;
        ReactQuill2.defaultProps = {
          theme: "snow",
          modules: {},
          readOnly: false
        };
        return ReactQuill2;
      }(react_1.default.Component)
    );
    function postpone(fn) {
      Promise.resolve().then(fn);
    }
    module.exports = ReactQuill;
  }
});
export default require_lib();
//# sourceMappingURL=react-quill.js.map
